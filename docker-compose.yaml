version: '3.8'

services:
  nginx:
    image: nginx:stable-alpine
    container_name: nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./nginx/ssl.conf:/etc/nginx/conf.d/ssl.conf:ro
      - certbot-webroot:/var/www/certbot:ro
      - certbot-etc:/etc/letsencrypt:ro
    depends_on:
      - certbot
      - my_app # Nginx depends on at least one instance of my_app
    restart: always

  certbot:
    image: certbot/certbot
    container_name: certbot
    volumes:
      - certbot-webroot:/var/www/certbot
      - certbot-etc:/etc/letsencrypt
    entrypoint: "/bin/sh -c 'trap exit TERM; while :; do certbot renew; sleep 12h & wait $$; done;'"
    restart: on-failure

  my_app: # This is your single application service
    build:
      context: . # Build from the Dockerfile in the current directory
    environment:
      NODE_ENV: production
      # You can add instance-specific environment variables if needed
      # e.g., APP_INSTANCE_ID: ${HOSTNAME} # Docker sets HOSTNAME to container ID
    expose:
      - "3000" # Expose to other containers on the Docker network
    restart: always
    # We will scale this service using 'docker compose up --scale my_app=<num>'
    # Do NOT put 'deploy: replicas' here if you're using `docker compose up` directly
    # for scaling, as it's typically for swarm mode.